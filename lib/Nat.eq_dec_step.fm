Nat.eq_dec_step
: {a : (Nat a)} {b : (Nat b)} {p : (Dec (Eq Nat a b) p)}
  (Dec (Eq Nat (Nat.succ a) (Nat.succ b)) (Nat.eq_dec_step a b p))
= [a] [b] [p]
  let motive_dec [self]
    (Dec (Eq Nat (Nat.succ a) (Nat.succ b)) (Nat.eq_dec_step a b self))
  let case_true [e : (Eq Nat a b e)]
    (Dec.true
      (Eq Nat (Nat.succ a) (Nat.succ b))
      (Eq.cong Nat Nat a b e Nat.succ))
  let case_false [n : (Not (Eq Nat a b) n)]
    (Dec.false
      (Eq Nat (Nat.succ a) (Nat.succ b))
      (Nat.succ_inj_r a b n))
    (p -motive_dec case_true case_false)
