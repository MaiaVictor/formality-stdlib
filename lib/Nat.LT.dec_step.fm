Nat.LT.dec_step
: {a : (Nat a)} {b : (Nat b)} {e : (Either (Nat.LT a b) (Not (Nat.LT a b)) e)}
  (Either (Nat.LT (Nat.succ a) (Nat.succ b)) (Not (Nat.LT (Nat.succ a) (Nat.succ b))) (Nat.LT.dec_step a b e))
= [a] [b] [e]
  let motive_either [self]
    (Either (Nat.LT (Nat.succ a) (Nat.succ b)) (Not (Nat.LT (Nat.succ a) (Nat.succ b))) (Nat.LT.dec_step a b self))
  let left [p : (Nat.LT a b p)]
    (Either.left (Nat.LT (Nat.succ a) (Nat.succ b)) (Not (Nat.LT (Nat.succ a) (Nat.succ b))) (Nat.LT.succ_monotone a b p))
  let right [n : (Not (Nat.LT a b) n)] 
    (Either.right (Nat.LT (Nat.succ a) (Nat.succ b)) (Not (Nat.LT (Nat.succ a) (Nat.succ b)))
      [p : (Nat.LT (Nat.succ a) (Nat.succ b) p)] (n (Nat.LT.succ_strict a b p)))
  (e -motive_either left right)
